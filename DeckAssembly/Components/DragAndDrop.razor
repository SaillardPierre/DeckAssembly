@using Microsoft.JSInterop;
@using System.Text.RegularExpressions
@using System.Globalization
@inject IJSRuntime JS;

<RadzenStack style="width: 100%; height: 100vh;" class="swapzone" JustifyContent="JustifyContent.Stretch">
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
                 style="width: 100%; height: 45vh;"
                 class="dropzone pickzone" id="DropZone1">
        @{
            int index = 0;
            foreach (Item i in MyItems)
            {
                <CardItem Item=i Index=index></CardItem>
                index++;
            }
        }
    </RadzenRow>

    <hr />
    <RadzenStack style="width: 100%; height: 10vh;">
         @if (CurrentDraggedItem is not null)
            {
                <CardItem Item=CurrentDraggedItem></CardItem>
            }
    </RadzenStack>   
    <hr />   
    <RadzenStack Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
                 class="w-100 h-50 dropzone"
                 style="width: 100%; height: 45vh;"
                 id="DropZone2">
        @{
            foreach (Item i in OtherItems)
            {
                <CardItem Item=i></CardItem>
            }
        }
    </RadzenStack>
</RadzenStack>

@code {
    private DotNetObjectReference<DragAndDrop>? blazorComponent;
    private DotNetObjectReference<DragManager>? dragManager;
    private Item? CurrentDraggedItem { get; set; }
    public List<Item> MyItems = new List<Item>
    {
    new Item(1,"Numéro 1"),
    new Item(2,"Numéro 2"),
    new Item(3,"Numéro 3 t'as capté")
    };
    public List<Item> OtherItems = new(){
    //new Item(1,"Numéro 1 bis")
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        blazorComponent = DotNetObjectReference.Create(this);
        dragManager = DotNetObjectReference.Create(new DragManager());
        //
        await JS.InvokeVoidAsync("dragAndDrop", ".draggable", ".swapzone", blazorComponent, dragManager);
        await JS.InvokeVoidAsync("dropZone", ".dropzone", blazorComponent);

    }

    [JSInvokable(nameof(OnDragStartAsync))]
    public async Task OnDragStartAsync(int index)
    {
        CurrentDraggedItem = MyItems[index];
        StateHasChanged();
    }

    [JSInvokable(nameof(OnDragEndAsync))]
    public async Task OnDragEndAsync()
    {
        CurrentDraggedItem = null;
        StateHasChanged();
    }

    [JSInvokable(nameof(HandleDrop))]
    public async Task HandleDrop(int index)
    {

    }
}

@using Microsoft.JSInterop;
@using System.Text.RegularExpressions
@using System.Globalization
@inject IJSRuntime JS;

<RadzenStack style="width: 100%; height: 100vh;" class="swapzone" JustifyContent="JustifyContent.Stretch" Gap="0px">
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
               style="height: 45vh;"
               class="pickPoolDropzone w-100 rz-display-flex rz-flex-row rz-border-base-300 rz-border-radius-2"
               id="@nameof(PickPool)">
        @{
            int index = 0;
            foreach (Item i in PickPool)
            {
                <CardItem Item=i Index=index CssClasses=cardClasses />
                index++;
            }
        }
    </RadzenRow>
    <RadzenRow style="width: 100%; height: 10vh;">
        @if (CurrentDraggedItem is not null)
        {
            <CardItem Item=CurrentDraggedItem />
        }
    </RadzenRow>
    <RadzenRow Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
               style="height: 45vh;"
               class="pickPoolDropzone w-100 rz-display-flex rz-flex-row rz-border-base-300 rz-border-radius-2"
               id="@nameof(PickHand)">
        @{
            int index = 0;
            foreach (Item i in PickHand)
            {
                <CardItem Item=i Index=index CssClasses=cardClasses />
                index++;
            }
        }
    </RadzenRow>
</RadzenStack>

@code {
    private DotNetObjectReference<PickPoolComponent>? blazorComponent;
    private DotNetObjectReference<DragManager>? dragManager;
    private List<string> cardClasses = new() { "pickPoolDraggable" };

    private Item? CurrentDraggedItem { get; set; }

    public List<Item> PickPool { get; set; } = new(){
    new Item(1,"Numéro 1"),
    new Item(2,"Numéro 2"),
    new Item(3,"Numéro 3 t'as capté")
    };
    public List<Item> PickHand { get; set; } = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        blazorComponent = DotNetObjectReference.Create(this);
        dragManager = DotNetObjectReference.Create(new DragManager());

        await JS.InvokeVoidAsync("pickPoolDraggables", ".pickPoolDraggable", blazorComponent, dragManager);
        await JS.InvokeVoidAsync("pickPoolDropzones", ".pickPoolDropzone", blazorComponent);
    }

    [JSInvokable(nameof(OnDragStartAsync))]
    public async Task OnDragStartAsync(PickPoolEventArgs args)
    {
        if (args.PickPoolSource == "PickPool")
        {
            CurrentDraggedItem = PickPool[args.Index];
        }
        else if (args.PickPoolSource == "PickHand")
        {
            CurrentDraggedItem = PickHand[args.Index];
        }
        else throw new ArgumentException();
        StateHasChanged();
    }

    [JSInvokable(nameof(OnDragEndAsync))]
    public async Task OnDragEndAsync()
    {
        CurrentDraggedItem = null;
        StateHasChanged();
    }

    [JSInvokable(nameof(OnDrop))]
    public async Task OnDrop(PickPoolEventArgs args)
    {
        if (CurrentDraggedItem is null) throw new InvalidOperationException();

        // TODO : Créer et Checker si les valeurs plafonds/seuils sont atteints

        if (args.PickPoolSource == "PickPool")
        {
            PickPool.Remove(CurrentDraggedItem);
            PickHand.Add(CurrentDraggedItem);
        }
        else if (args.PickPoolSource == "PickHand")
        {
            PickHand.Remove(CurrentDraggedItem);
            PickPool.Add(CurrentDraggedItem);
        }
        CurrentDraggedItem = null;
        StateHasChanged();
    }

    public class PickPoolEventArgs
    {
        public int Index { get; set; }
        public string PickPoolSource { get; set; }
    }
}

@using DeckAssembly.EventArgs
@using DeckAssembly.Model
@using Microsoft.JSInterop;
@using System.Text.RegularExpressions
@using System.Globalization
@inject IJSRuntime JS;

<RadzenStack style="width: 100%; height: 100vh;" class="swapzone" JustifyContent="JustifyContent.Stretch" Gap="0px">
    <RadzenStack class="pickPoolDropzone w-100" style="height: 45vh;" id="@Dropzone.PickPool">
        <RadzenText Text=@PickPoolSizeLabel TextStyle="TextStyle.DisplayH1" />
        <CardItemList ItemList=PickPool CardClasses=cardClasses @ref=PickPoolCardItemList />
    </RadzenStack>
    <RadzenRow style="width: 100%; height: 10vh;">
        <RadzenText Text=@FutureDropIndex.ToString() TextStyle="TextStyle.DisplayH1" />
        @if (CurrentDraggedItem is not null)
        {
            <CardItem Item=CurrentDraggedItem />
        }
    </RadzenRow>
    <RadzenStack class="pickPoolDropzone w-100" style="height: 45vh;" id="@Dropzone.PickHand">
        <CardItemList ItemList=PickHand CardClasses=cardClasses />
        <RadzenText Text=@PickPoolSizeLabel TextStyle="TextStyle.DisplayH1" />
    </RadzenStack>

</RadzenStack>

@code {
    private string PickPoolSizeLabel => $"PickPoolSize : {PickPool.Count + PickHand.Count}";

    private DotNetObjectReference<PickPoolComponent>? blazorComponent;
    private DotNetObjectReference<DragManager>? dragManager;
    private List<string> cardClasses = new() { "pickPoolDraggable" };

    private CardItemList PickPoolCardItemList;
    private Item? CurrentDraggedItem { get; set; }
    private int? FutureDropIndex { get; set; }


    [Parameter]
    public int PickHandLowerThreshold { get; set; }
    [Parameter]
    public int? PickHandUpperThreshold { get; set; }

    [Parameter]
    public List<Item> PickPool { get; set; }
    public List<Item> PickHand { get; set; } = new();

    private static string PickPoolDropzoneClassName => "pickPoolDropzone";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        blazorComponent = DotNetObjectReference.Create(this);
        dragManager = DotNetObjectReference.Create(new DragManager());
        await JS.InvokeVoidAsync("pickPoolDraggables", ".pickPoolDraggable", "." + PickPoolDropzoneClassName, blazorComponent, dragManager);

        await JS.InvokeVoidAsync("pickPoolDropzones", "." + PickPoolDropzoneClassName, blazorComponent);
    }

    [JSInvokable(nameof(OnDragStartAsync))]
    public async Task OnDragStartAsync(PickPoolEventArgs args)
    {
        // TODO : Ajouter les checks sur l'index
        if (args.PickPoolSource == "PickPool")
        {
            CurrentDraggedItem = PickPool[args.Index];
        }
        else if (args.PickPoolSource == "PickHand")
        {
            CurrentDraggedItem = PickHand[args.Index];
        }
        else throw new ArgumentException();
        StateHasChanged();
    }

    [JSInvokable(nameof(OnDragEndAsync))]
    public async Task OnDragEndAsync()
    {
        CurrentDraggedItem = null;
        FutureDropIndex = null;
        StateHasChanged();
    }

    [JSInvokable(nameof(OnDrop))]
    public async ValueTask OnDrop(DropEventArgs args)
    {
        if (CurrentDraggedItem is null) return;

        List<Item> destination;
        if (args.Destination == Dropzone.PickHand)
        {
            destination = PickHand;
        }
        else if (args.Destination == Dropzone.PickPool)
        {
            destination = PickPool;
        }
        else throw new ArgumentException("Destination invalide");

        if (args.DropEventSource == DropEventSource.Self)
        {
            destination.PutBackAtIndex(CurrentDraggedItem, FutureDropIndex);
        }
        else if (args.DropEventSource == DropEventSource.Target)
        {
            List<Item> source = destination == PickHand ? PickPool : PickHand;
            DropOnTarget(source, destination, CurrentDraggedItem, FutureDropIndex);
        }
        CurrentDraggedItem = null;
        FutureDropIndex = null;
    }

    public void DropOnTarget(List<Item> source, List<Item> destination, Item item, int? index)
    {
        destination.InsertOrAppend(item, index);
        source.Remove(item);
    }

    [JSInvokable(nameof(GetFutureDropIndex))]
    public async ValueTask GetFutureDropIndex(DragEnterEventArgs args)
    {
        if (CurrentDraggedItem is null) throw new InvalidOperationException("CurrentDraggedItem est null dans GetFutureDropIdnex");
        Coordinate coordinates;
        if (args.DragEnterSource == DragEnterSource.Self)
        {
            coordinates = args.Coordinates.RemoveAtAndReturn(args.Index);
        }
        else
        {
            coordinates = args.Coordinates.Last();
        }

        FutureDropIndex = DragManager.GetFutureIndex(coordinates, args.Coordinates);
        StateHasChanged();
    }

    public static class Dropzone
    {
        public const string PickPool = nameof(PickPool);
        public const string PickHand = nameof(PickHand);
    }

}
